import org.apache.http.impl.client.HttpClients
import org.jtwig.plugins.bintray.http.BintrayHttpClient
import org.jtwig.plugins.bintray.http.BintrayHttpClientFactory
import org.jtwig.plugins.bintray.http.auth.BintrayAuthentication
import org.jtwig.plugins.master.CheckVersionReleasedService
import org.jtwig.plugins.master.GetProjectDependenciesService
import org.jtwig.plugins.master.ResolveProjectDependenciesService
import org.jtwig.plugins.travis.TriggerBuildService
import org.jtwig.plugins.travis.TriggerBuilderBodyService

group 'org.jtwig'
version '1.0'

apply plugin: 'java'
apply plugin: ReleasePlugin

sourceCompatibility = 1.7

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/jtwig/maven"
        }
    }

    dependencies {
        classpath 'org.jtwig:jtwig-release-plugin:1.+'
    }
}

release {
    version = System.getenv("TRAVIS_TAG")
    token = System.getenv("TRAVIS_TOKEN")
    bintrayUser = System.getenv("BINTRAY_USER")
    bintrayApiKey = System.getenv("BINTRAY_KEY")
    projects = [
            "jtwig-cache-extension",
            "jtwig-highlight-extension",
            "jtwig-hot-reloading-extension",
            "jtwig-json-extension",
            "jtwig-spaceless-extension",
            "jtwig-spring-translate-extension",
            "jtwig-xliff",
            "jtwig-render-extension",
            "jtwig-spring-asset-extension",
            "jtwig-translate-extension",
            "jtwig-spring-csrf-extension",
            "jtwig-spring-boot-starter",
            "jtwig-spring",
            "jtwig-web",
            "jtwig-pluralization",
            "jtwig-core",
            "jtwig-reflection"
    ]
}

class ReleasePlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.extensions.create("release", ReleaseExtension)
        project.task("release").doFirst({
            BintrayHttpClient client = BintrayHttpClientFactory.create(project.extensions.release.bintrayBaseUrl, new BintrayAuthentication(
                    project.extensions.release.bintrayUser,
                    project.extensions.release.bintrayApiKey
            ));

            ReleaseProcessService releaseProcessService = new ReleaseProcessService(
                    project.extensions.release.baseUrl,
                    project.extensions.release.token,
                    new ResolveProjectDependenciesService(new GetProjectDependenciesService(project.extensions.release.githubRawBaseUrl, Arrays.asList(
                            "jtwig-release-plugin"
                    ))),
                    new CheckVersionReleasedService(project.extensions.release.bintrayBaseUrl, client),
                    new TriggerBuildService(HttpClients.createDefault(), new TriggerBuilderBodyService("JTWIG_VERSION", project.extensions.release.version))
            );

            releaseProcessService.release(project.extensions.release.projects, project.extensions.release.version);
        })
    }
}

class ReleaseProcessService {
    private final String travisBaseUrl;
    private final String travisToken;
    private final ResolveProjectDependenciesService resolveProjectDependenciesService;
    private final CheckVersionReleasedService projectVersionReleased;
    private final TriggerBuildService triggerBuildService;

    public ReleaseProcessService(String travisBaseUrl, String travisToken, ResolveProjectDependenciesService resolveProjectDependenciesService, CheckVersionReleasedService projectVersionReleased, TriggerBuildService triggerBuildService) {
        this.travisBaseUrl = travisBaseUrl;
        this.travisToken = travisToken;
        this.resolveProjectDependenciesService = resolveProjectDependenciesService;
        this.projectVersionReleased = projectVersionReleased;
        this.triggerBuildService = triggerBuildService;
    }

    public void release(List<String> projects, String version) {
        List<String> ordered = resolveProjectDependenciesService.resolveDependencies(projects);

        for (String project : ordered) {
            println String.format("Triggering release of project %s", project);
            triggerBuildService.trigger(travisBaseUrl, travisToken, "jtwig/" + project, version);
            waitForRelease(project, version);
        }
    }

    private void waitForRelease(String project, String version) {
        println String.format("Waiting for project %s to be released with version %s", project, version);
        boolean released = false;

        while (!released) {
            try {
                Thread.sleep(30000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            released = projectVersionReleased.released(project, version);
        }
    }
}

class ReleaseExtension {
    String version
    String token
    String bintrayUser
    String bintrayApiKey
    String baseUrl = "https://api.travis-ci.org"
    String githubRawBaseUrl = "https://raw.githubusercontent.com"
    String bintrayBaseUrl = "https://bintray.com/api/v1"
    List<String> projects = []
}